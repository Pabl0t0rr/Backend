/*
üöó Enunciado del ejercicio: ‚ÄúAPI de Conductores y Veh√≠culos‚Äù
üéØ Objetivo

Desarrollar una API REST con Express y TypeScript que gestione informaci√≥n sobre conductores y veh√≠culos, permitiendo realizar operaciones CRUD completas y aplicar filtros din√°micos para buscar registros seg√∫n distintos criterios.

üß± 1. Contexto

Una peque√±a empresa de transporte quiere digitalizar el control de sus empleados y su flota de veh√≠culos.
Necesitan una API que permita:

Registrar nuevos conductores con su informaci√≥n personal.

Registrar veh√≠culos, cada uno asociado (opcionalmente) a un conductor.

Consultar, actualizar y eliminar registros de ambos.

Filtrar f√°cilmente por par√°metros como edad, marca, o nombre.
*/

import express from 'express';
import cors from 'cors';

const app = express();
const port = 3000;
app.use(cors());
app.use(express.json());

/*
üß© 2. Tipos de datos

Define los siguientes tipos:
type Driver = {
  id: number;
  name: string;
  age: number;
  licenseType: string; // A, B, C, D...
};

type Vehicle = {
  id: number;
  brand: string;
  model: string;
  year: number;
  driverInfo?: Driver | undefined;
};
*/

type Driver = {
    id: number,
    name : string,
    age :number,
    licenseType : string
}

type Vehicles = {
    id : number,
    brand : string,
    model:string,
    year : number,
    driverInfo? : Driver | undefined
}

/*
üö¶ 3. Datos iniciales

Crea algunos datos base:

Conductores
[
  { id: 1, name: "Carlos L√≥pez", age: 45, licenseType: "C" },
  { id: 2, name: "Luc√≠a P√©rez", age: 32, licenseType: "B" }
]
Veh√≠culos
[
  { id: 1, brand: "Toyota", model: "Hilux", year: 2018, driverInfo: drivers[0] },
  { id: 2, brand: "Ford", model: "Focus", year: 2021, driverInfo: drivers[1] },
  { id: 3, brand: "Renault", model: "Kangoo", year: 2015 }
]
*/

//Creacion de los objetos
let arrDrivers : Driver[] = [
  { id: 1, name: "Carlos L√≥pez", age: 45, licenseType: "C" },
  { id: 2, name: "Luc√≠a P√©rez", age: 32, licenseType: "B" }
];
let arrVehicles : Vehicles[]  = [
  { id: 1, brand: "Toyota", model: "Hilux", year: 2018, driverInfo: arrDrivers[0] },
  { id: 2, brand: "Ford", model: "Focus", year: 2021, driverInfo: arrDrivers[1] },
  { id: 3, brand: "Renault", model: "Kangoo", year: 2015 }
];

/*
‚öôÔ∏è 4. Endpoints requeridos
üöô Veh√≠culos
M√©todo	Ruta	Descripci√≥n
GET	/vehicles	Devuelve todos los veh√≠culos
GET	/vehicles/:id	Devuelve un veh√≠culo por su ID
POST	/vehicles	Crea un nuevo veh√≠culo con ID incremental
PUT	/vehicles/:id	Modifica los datos de un veh√≠culo
DELETE	/vehicles/:id	Elimina un veh√≠culo por ID

üë®‚Äç‚úàÔ∏è Conductores
M√©todo	Ruta	Descripci√≥n
GET	/drivers	Devuelve todos los conductores
GET	/drivers/:id	Devuelve un conductor por su ID
POST	/drivers	Crea un nuevo conductor
PUT	/drivers/:id	Modifica un conductor existente
DELETE	/drivers/:id	Elimina un conductor
*/

//Rutas Generales
